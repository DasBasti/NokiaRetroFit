C51 COMPILER V9.01   LCD                                                                   02/22/2014 15:15:22 PAGE 1   


C51 COMPILER V9.01, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN LCD.obj
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE LCD\LCD.c LARGE BROWSE DEBUG OBJECTEXTEND PRINT(.\LCD.lst) OBJECT(LCD.obj)

line level    source

   1          #include <reg51.h>
   2          #include <intrins.h>
   3          #include <font\font.h>
   4          #include <sys\sys.h>
   5          #include <lcd\lcd.h>
   6          
   7          unsigned char bdata bitdata;
   8          sbit bit7=bitdata^7;
   9          sbit bit6=bitdata^6;
  10          sbit bit5=bitdata^5;
  11          sbit bit4=bitdata^4;
  12          sbit bit3=bitdata^3;
  13          sbit bit2=bitdata^2;
  14          sbit bit1=bitdata^1;
  15          sbit bit0=bitdata^0;
  16          
  17          u16 BACK_COLOR, POINT_COLOR;   //背景色，画笔色   
  18          void LCD_Writ_Bus(char da)   //串行数据写入
  19          {       
  20   1              bitdata=da;
  21   1              LCD_SDA=bit7;LCD_SCK=0;LCD_SCK=1;
  22   1              LCD_SDA=bit6;LCD_SCK=0;LCD_SCK=1;
  23   1              LCD_SDA=bit5;LCD_SCK=0;LCD_SCK=1;
  24   1              LCD_SDA=bit4;LCD_SCK=0;LCD_SCK=1;
  25   1              LCD_SDA=bit3;LCD_SCK=0;LCD_SCK=1;
  26   1              LCD_SDA=bit2;LCD_SCK=0;LCD_SCK=1;
  27   1              LCD_SDA=bit1;LCD_SCK=0;LCD_SCK=1;
  28   1              LCD_SDA=bit0;LCD_SCK=0;LCD_SCK=1; 
  29   1      } 
  30          void LCD_WR_DATA8(char da) //发送数据-8位参数
  31          {
  32   1          LCD_AO=1;
  33   1              LCD_Writ_Bus(da);
  34   1      }  
  35           void LCD_WR_DATA(int da)
  36          {
  37   1          LCD_AO=1;
  38   1              LCD_Writ_Bus(da>>8);
  39   1              LCD_Writ_Bus(da);
  40   1      }         
  41          void LCD_WR_REG(char da)         
  42          {
  43   1          LCD_AO=0;
  44   1              LCD_Writ_Bus(da);
  45   1      }
  46           void LCD_WR_REG_DATA(int reg,int da)
  47          {
  48   1          LCD_WR_REG(reg);
  49   1              LCD_WR_DATA(da);
  50   1      }
  51          void Address_set(unsigned int x1,unsigned int y1,unsigned int x2,unsigned int y2)
  52          {  
  53   1              LCD_WR_REG(0x2A); //Set Column Address
  54   1              LCD_WR_DATA8(0x00);
  55   1              LCD_WR_DATA8(x1);
C51 COMPILER V9.01   LCD                                                                   02/22/2014 15:15:22 PAGE 2   

  56   1              LCD_WR_DATA8(0x00);
  57   1              LCD_WR_DATA8(x2);
  58   1              LCD_WR_REG(0x2B); //Set Page Address
  59   1              LCD_WR_DATA8(0x00);
  60   1              LCD_WR_DATA8(y1+32);
  61   1              LCD_WR_DATA8(0x00);
  62   1              LCD_WR_DATA8(y2+32);
  63   1      
  64   1         LCD_WR_REG(0x2C);
  65   1      
  66   1      }
  67          void Lcd_Init(void)
  68          {
  69   1      
  70   1      //调用一次这些函数，免得编译的时候提示警告
  71   1              LCD_CS =1;
  72   1              if(LCD_CS==0)
  73   1              {
  74   2                 LCD_WR_REG_DATA(0,0);
  75   2                 LCD_ShowString(0,0," ");
  76   2                 LCD_ShowNum(0,0,0,0);
  77   2                 LCD_Show2Num(0,0,0,0);
  78   2                 LCD_DrawPoint_big(0,0);
  79   2                 LCD_DrawRectangle(0,0,0,0);
  80   2                 Draw_Circle(0,0,0);
  81   2               }
  82   1              LCD_REST=0;
  83   1              delayms(20);
  84   1              LCD_REST=1;
  85   1              delayms(20);
  86   1              LCD_CS =0;  //打开片选使能
  87   1      
  88   1          LCD_WR_REG(0x11); //Exit Sleep
  89   1              delayms(20);
  90   1              LCD_WR_REG(0x26); //Set Default Gamma
  91   1              LCD_WR_DATA8(0x04);
  92   1              LCD_WR_REG(0xB1);//Set Frame Rate
  93   1              LCD_WR_DATA8(0x0e);
  94   1              LCD_WR_DATA8(0x10);
  95   1              LCD_WR_REG(0xC0); //Set VRH1[4:0] & VC[2:0] for VCI1 & GVDD
  96   1              LCD_WR_DATA8(0x08);
  97   1              LCD_WR_DATA8(0x00);
  98   1              LCD_WR_REG(0xC1); //Set BT[2:0] for AVDD & VCL & VGH & VGL
  99   1              LCD_WR_DATA8(0x05);
 100   1              LCD_WR_REG(0xC5); //Set VMH[6:0] & VML[6:0] for VOMH & VCOML
 101   1              LCD_WR_DATA8(0x38);
 102   1              LCD_WR_DATA8(0x40);
 103   1              
 104   1              LCD_WR_REG(0x3a); //Set Color Format
 105   1              LCD_WR_DATA8(0x05);
 106   1              LCD_WR_REG(0x36); //RGB
 107   1              LCD_WR_DATA8(0x1C);   //1C//C8
 108   1              
 109   1              LCD_WR_REG(0x2A); //Set Column Address
 110   1              LCD_WR_DATA8(0x00);
 111   1              LCD_WR_DATA8(0x00);
 112   1              LCD_WR_DATA8(0x00);
 113   1              LCD_WR_DATA8(0x7F);
 114   1              LCD_WR_REG(0x2B); //Set Page Address
 115   1              LCD_WR_DATA8(0x00);
 116   1              LCD_WR_DATA8(32);
 117   1              LCD_WR_DATA8(0x00);
C51 COMPILER V9.01   LCD                                                                   02/22/2014 15:15:22 PAGE 3   

 118   1              LCD_WR_DATA8(127+32);
 119   1              
 120   1              LCD_WR_REG(0xB4); 
 121   1              LCD_WR_DATA8(0x00);
 122   1              
 123   1              LCD_WR_REG(0xf2); //Enable Gamma bit
 124   1              LCD_WR_DATA8(0x01);
 125   1              LCD_WR_REG(0xE0); 
 126   1              LCD_WR_DATA8(0x3f);//p1
 127   1              LCD_WR_DATA8(0x22);//p2
 128   1              LCD_WR_DATA8(0x20);//p3
 129   1              LCD_WR_DATA8(0x30);//p4
 130   1              LCD_WR_DATA8(0x29);//p5
 131   1              LCD_WR_DATA8(0x0c);//p6
 132   1              LCD_WR_DATA8(0x4e);//p7
 133   1              LCD_WR_DATA8(0xb7);//p8
 134   1              LCD_WR_DATA8(0x3c);//p9
 135   1              LCD_WR_DATA8(0x19);//p10
 136   1              LCD_WR_DATA8(0x22);//p11
 137   1              LCD_WR_DATA8(0x1e);//p12
 138   1              LCD_WR_DATA8(0x02);//p13
 139   1              LCD_WR_DATA8(0x01);//p14
 140   1              LCD_WR_DATA8(0x00);//p15
 141   1              LCD_WR_REG(0xE1); 
 142   1              LCD_WR_DATA8(0x00);//p1
 143   1              LCD_WR_DATA8(0x1b);//p2
 144   1              LCD_WR_DATA8(0x1f);//p3
 145   1              LCD_WR_DATA8(0x0f);//p4
 146   1              LCD_WR_DATA8(0x16);//p5
 147   1              LCD_WR_DATA8(0x13);//p6
 148   1              LCD_WR_DATA8(0x31);//p7
 149   1              LCD_WR_DATA8(0x84);//p8
 150   1              LCD_WR_DATA8(0x43);//p9
 151   1              LCD_WR_DATA8(0x06);//p10
 152   1              LCD_WR_DATA8(0x1d);//p11
 153   1              LCD_WR_DATA8(0x21);//p12
 154   1              LCD_WR_DATA8(0x3d);//p13
 155   1              LCD_WR_DATA8(0x3e);//p14
 156   1              LCD_WR_DATA8(0x3f);//p15
 157   1              
 158   1              LCD_WR_REG(0x29); // Display On
 159   1              LCD_WR_REG(0x2C);
 160   1      
 161   1      
 162   1      }
 163          //清屏函数
 164          //Color:要清屏的填充色
 165          void LCD_Clear(u16 Color)
 166          {
 167   1              u8 VH,VL;
 168   1              u16 i,j;
 169   1              VH=Color>>8;
 170   1              VL=Color;       
 171   1              Address_set(0,0,LCD_W-1,LCD_H-1);
 172   1          for(i=0;i<LCD_W;i++)
 173   1               {
 174   2                for (j=0;j<LCD_H;j++)
 175   2                      {
 176   3                       LCD_WR_DATA8(VH);
 177   3                               LCD_WR_DATA8(VL);      
 178   3      
 179   3                  }
C51 COMPILER V9.01   LCD                                                                   02/22/2014 15:15:22 PAGE 4   

 180   2      
 181   2                }
 182   1      }
 183          //在指定位置显示一个汉字(32*33大小)
 184          //dcolor为内容颜色，gbcolor为背静颜色
 185          void showhanzi(unsigned int x,unsigned int y,unsigned char index)       
 186          {  
 187   1              unsigned char i,j;
 188   1              unsigned char *temp=hanzi;    
 189   1          Address_set(x,y,x+31,y+31); //设置区域      
 190   1              temp+=index*128;        
 191   1              for(j=0;j<128;j++)
 192   1              {
 193   2                      for(i=0;i<8;i++)
 194   2                      {                    
 195   3                              if((*temp&(1<<i))!=0)
 196   3                              {
 197   4                                      LCD_WR_DATA(POINT_COLOR);
 198   4                              } 
 199   3                              else
 200   3                              {
 201   4                                      LCD_WR_DATA(BACK_COLOR);
 202   4                              }   
 203   3                      }
 204   2                      temp++;
 205   2               }
 206   1      }
 207          //画点
 208          //POINT_COLOR:此点的颜色
 209          void LCD_DrawPoint(u16 x,u16 y)
 210          {
 211   1              Address_set(x,y,x,y);//设置光标位置 
 212   1              LCD_WR_DATA(POINT_COLOR);           
 213   1      }        
 214          //画一个大点
 215          //POINT_COLOR:此点的颜色
 216          void LCD_DrawPoint_big(u16 x,u16 y)
 217          {
 218   1              LCD_Fill(x-1,y-1,x+1,y+1,POINT_COLOR);
 219   1      } 
 220          //在指定区域内填充指定颜色
 221          //区域大小:
 222          //  (xend-xsta)*(yend-ysta)
 223          void LCD_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
 224          {          
 225   1              u16 i,j; 
 226   1              Address_set(xsta,ysta,xend,yend);      //设置光标位置 
 227   1              for(i=ysta;i<=yend;i++)
 228   1              {                                                                                                                       
 229   2                      for(j=xsta;j<=xend;j++)LCD_WR_DATA(color);//设置光标位置            
 230   2              }                                                   
 231   1      }  
 232          //画线
 233          //x1,y1:起点坐标
 234          //x2,y2:终点坐标  
 235          void LCD_DrawLine(u16 x1, u16 y1, u16 x2, u16 y2)
 236          {
 237   1              u16 t; 
 238   1              int xerr=0,yerr=0,delta_x,delta_y,distance; 
 239   1              int incx,incy,uRow,uCol; 
 240   1      
 241   1              delta_x=x2-x1; //计算坐标增量 
C51 COMPILER V9.01   LCD                                                                   02/22/2014 15:15:22 PAGE 5   

 242   1              delta_y=y2-y1; 
 243   1              uRow=x1; 
 244   1              uCol=y1; 
 245   1              if(delta_x>0)incx=1; //设置单步方向 
 246   1              else if(delta_x==0)incx=0;//垂直线 
 247   1              else {incx=-1;delta_x=-delta_x;} 
 248   1              if(delta_y>0)incy=1; 
 249   1              else if(delta_y==0)incy=0;//水平线 
 250   1              else{incy=-1;delta_y=-delta_y;} 
 251   1              if( delta_x>delta_y)distance=delta_x; //选取基本增量坐标轴 
 252   1              else distance=delta_y; 
 253   1              for(t=0;t<=distance+1;t++ )//画线输出 
 254   1              {  
 255   2                      LCD_DrawPoint(uRow,uCol);//画点 
 256   2                      xerr+=delta_x ; 
 257   2                      yerr+=delta_y ; 
 258   2                      if(xerr>distance) 
 259   2                      { 
 260   3                              xerr-=distance; 
 261   3                              uRow+=incx; 
 262   3                      } 
 263   2                      if(yerr>distance) 
 264   2                      { 
 265   3                              yerr-=distance; 
 266   3                              uCol+=incy; 
 267   3                      } 
 268   2              }  
 269   1      }    
 270          //画矩形
 271          void LCD_DrawRectangle(u16 x1, u16 y1, u16 x2, u16 y2)
 272          {
 273   1              LCD_DrawLine(x1,y1,x2,y1);
 274   1              LCD_DrawLine(x1,y1,x1,y2);
 275   1              LCD_DrawLine(x1,y2,x2,y2);
 276   1              LCD_DrawLine(x2,y1,x2,y2);
 277   1      }
 278          //在指定位置画一个指定大小的圆
 279          //(x,y):中心点
 280          //r    :半径
 281          void Draw_Circle(u16 x0,u16 y0,u8 r)
 282          {
 283   1              int a,b;
 284   1              int di;
 285   1              a=0;b=r;          
 286   1              di=3-(r<<1);             //判断下个点位置的标志
 287   1              while(a<=b)
 288   1              {
 289   2                      LCD_DrawPoint(x0-b,y0-a);             //3           
 290   2                      LCD_DrawPoint(x0+b,y0-a);             //0           
 291   2                      LCD_DrawPoint(x0-a,y0+b);             //1       
 292   2                      LCD_DrawPoint(x0-b,y0-a);             //7           
 293   2                      LCD_DrawPoint(x0-a,y0-b);             //2             
 294   2                      LCD_DrawPoint(x0+b,y0+a);             //4               
 295   2                      LCD_DrawPoint(x0+a,y0-b);             //5
 296   2                      LCD_DrawPoint(x0+a,y0+b);             //6 
 297   2                      LCD_DrawPoint(x0-b,y0+a);             
 298   2                      a++;
 299   2                      //使用Bresenham算法画圆     
 300   2                      if(di<0)di +=4*a+6;       
 301   2                      else
 302   2                      {
 303   3                              di+=10+4*(a-b);   
C51 COMPILER V9.01   LCD                                                                   02/22/2014 15:15:22 PAGE 6   

 304   3                              b--;
 305   3                      } 
 306   2                      LCD_DrawPoint(x0+a,y0+b);
 307   2              }
 308   1      } 
 309          //在指定位置显示一个字符
 310          
 311          //num:要显示的字符:" "--->"~"
 312          //mode:叠加方式(1)还是非叠加方式(0)
 313          //在指定位置显示一个字符
 314          
 315          //num:要显示的字符:" "--->"~"
 316          
 317          //mode:叠加方式(1)还是非叠加方式(0)
 318          void LCD_ShowChar(u16 x,u16 y,u8 num,u8 mode)
 319          {
 320   1          u8 temp;
 321   1          u8 pos,t;
 322   1              u16 x0=x;
 323   1              u16 colortemp=POINT_COLOR;      
 324   1          if(x>LCD_W-16||y>LCD_H-16)return;       
 325   1              //设置窗口                 
 326   1              num=num-' ';//得到偏移后的值
 327   1              Address_set(x,y,x+8-1,y+16-1);      //设置光标位置 
 328   1              if(!mode) //非叠加方式
 329   1              {
 330   2                      for(pos=0;pos<16;pos++)
 331   2                      { 
 332   3                              temp=asc2_1608[(u16)num*16+pos];                 //调用1608字体
 333   3                              for(t=0;t<8;t++)
 334   3                          {                 
 335   4                              if(temp&0x01)POINT_COLOR=colortemp;
 336   4                                      else POINT_COLOR=BACK_COLOR;
 337   4                                      LCD_WR_DATA(POINT_COLOR);       
 338   4                                      temp>>=1; 
 339   4                                      x++;
 340   4                          }
 341   3                              x=x0;
 342   3                              y++;
 343   3                      }       
 344   2              }else//叠加方式
 345   1              {
 346   2                      for(pos=0;pos<16;pos++)
 347   2                      {
 348   3                          temp=asc2_1608[(u16)num*16+pos];             //调用1608字体
 349   3                              for(t=0;t<8;t++)
 350   3                          {                 
 351   4                              if(temp&0x01)LCD_DrawPoint(x+t,y+pos);//画一个点     
 352   4                              temp>>=1; 
 353   4                          }
 354   3                      }
 355   2              }
 356   1              POINT_COLOR=colortemp;                            
 357   1      }   
 358          //m^n函数
 359          u32 mypow(u8 m,u8 n)
 360          {
 361   1              u32 result=1;    
 362   1              while(n--)result*=m;    
 363   1              return result;
 364   1      }                        
 365          //显示2个数字
C51 COMPILER V9.01   LCD                                                                   02/22/2014 15:15:22 PAGE 7   

 366          //x,y :起点坐标  
 367          //len :数字的位数
 368          //color:颜色
 369          //num:数值(0~4294967295);       
 370          void LCD_ShowNum(u16 x,u16 y,u32 num,u8 len)
 371          {               
 372   1              u8 t,temp;
 373   1              u8 enshow=0;
 374   1              num=(u16)num;
 375   1              for(t=0;t<len;t++)
 376   1              {
 377   2                      temp=(num/mypow(10,len-t-1))%10;
 378   2                      if(enshow==0&&t<(len-1))
 379   2                      {
 380   3                              if(temp==0)
 381   3                              {
 382   4                                      LCD_ShowChar(x+8*t,y,' ',0);
 383   4                                      continue;
 384   4                              }else enshow=1; 
 385   3                               
 386   3                      }
 387   2                      LCD_ShowChar(x+8*t,y,temp+48,0); 
 388   2              }
 389   1      } 
 390          //显示2个数字
 391          //x,y:起点坐标
 392          //num:数值(0~99);        
 393          void LCD_Show2Num(u16 x,u16 y,u16 num,u8 len)
 394          {               
 395   1              u8 t,temp;                                                 
 396   1              for(t=0;t<len;t++)
 397   1              {
 398   2                      temp=(num/mypow(10,len-t-1))%10;
 399   2                      LCD_ShowChar(x+8*t,y,temp+'0',0); 
 400   2              }
 401   1      } 
 402          //显示字符串
 403          //x,y:起点坐标  
 404          //*p:字符串起始地址
 405          //用16字体
 406          void LCD_ShowString(u16 x,u16 y,const u8 *p)
 407          {         
 408   1          while(*p!='\0')
 409   1          {       
 410   2              if(x>LCD_W-16){x=0;y+=16;}
 411   2              if(y>LCD_H-16){y=x=0;}
 412   2              LCD_ShowChar(x,y,*p,0);
 413   2              x+=8;
 414   2              p++;
 415   2          }  
 416   1      }
 417          
 418          
 419          
 420          
 421          
 422          
 423          
 424          
 425          
 426          
 427          
C51 COMPILER V9.01   LCD                                                                   02/22/2014 15:15:22 PAGE 8   

 428          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   3298    ----
   CONSTANT SIZE    =      2    ----
   XDATA SIZE       =      4     123
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      1    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
